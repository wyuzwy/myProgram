String、StringBuffer、StringBuilter的区别？
答：（1）String 字符串常量 ；StringBuffer 字符串变量（线程安全）；StringBuilder 字符串变量（非线程安全）
    （2）简要的说， String 类型和 StringBuffer 类型的主要性能区别其实在于 String 是不可变的对象,
	 因此在每次对 String 类型进行改变的时候其实都等同于生成了一个新的 String 对象，然后将指针指向新的 String 对象
    （3）如果一个StringBuffer对象在字符串缓冲区被多个线程使用时，StringBuffer中很多方法可以带有synchronized关键字，所以可以保证线程是安全的，
	但StringBuilder的方法则没有该关键字，所以不能保证线程安全，有可能会出现一些错误的操作。
	所以如果要进行的操作是多线程的，那么就要使用StringBuffer，但是在单线程的情况下，还是建议使用速度比较快的StringBuilder。
    （4）三者在执行速度方面的比较：StringBuilder >  StringBuffer  >  String
    （5）String：适用于少量的字符串操作的情况 
　　	 StringBuffer：适用多线程下在字符缓冲区进行大量操作的情况
	 StringBuilder：适用于单线程下在字符缓冲区进行大量操作的情况 

ArrayList和LinkedList的区别：
     （1）ArrayList和LinkedList可想从名字分析，它们一个是Array(动态数组)的数据结构，一个是Link(链表)的数据结构，此外，它们两个都是对List接口的实现。
	前者是数组队列，相当于动态数组；后者为双向链表结构，也可当作堆栈、队列、双端队列。
     （2）当随机访问List时（get和set操作），ArrayList比LinkedList的效率更高，因为LinkedList是线性的数据存储方式，所以需要移动指针从前往后依次查找。
     （3）当对数据进行增加和删除的操作时(add和remove操作)，LinkedList比ArrayList的效率更高，因为ArrayList是数组，所以在其中进行增删操作时，会对操作点之后所有数据的下标索引造成影响，需要进行数据的移动。

hashMap、hashTable、concurrentHashMap的区别：
	（1）hashMap线程不安全，hashTable线程安全、concurrentHashMap线程安全
	（2）HashMap允许键和值是null，而Hashtable不允许键或者值是null；底层数组+链表实现
	（3）Hashtable是同步的，而HashMap不是。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境；底层数组+链表实现
	（4）HashMap是非synchronized，而Hashtable是synchronized，这意味着Hashtable是线程安全的，多个线程可以共享一个Hashtable；
		而如果没有正确的同步的话，多个线程是不能共享HashMap的。Java 5提供了ConcurrentHashMap，它是HashTable
	（5）ConcurrentHashMap是使用了锁分段技术来保证线程安全的。采用了非常精妙的"分段锁"策略，ConcurrentHashMap将哈希表分成许多片段(Segment)，
		每一个片段除了保存哈希表之外，本质上也是一个“可重入的互斥锁”(ReentrantLock)。底层采用分段的数组+链表实现，线程安全

为什么hashmap是不安全的？
	 在put的时候，插入的元素超过了容量（由负载因子决定）的范围就会触发扩容操作，就是rehash，这个会重新将原数组的内容重新hash到新的扩容数组中，
	在多线程的环境下，存在同时其他的元素也在进行put操作，如果hash值相同，可能出现同时在同一数组下用链表表示，造成闭环，导致在get时会出现死循环，
	所以HashMap是线程不安全的。

hashMap的put过程
	hash(key)，取key的hashcode进行高位运算，返回hash值 (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16)；
	对hash进行取模运算计算，得到key-value在数组中的存储位置i
		如果table[i] == null，直接插入Node<key,value>
		如果table[i] != null，判断是否为链表
			如果是链表，则判断Node是否已存在，如果存在则直接返回oldnode并更新；不存在则直接插入链表尾部，判断链表长度，如果大于8则转为红黑树存储，++size，超出threshold容量就扩容（使用equals（）来判断）

Set、List、Map的区别：
	List特点：元素有放入顺序，元素可重复 
	Map特点：元素按键值对存储，无放入顺序 
	Set特点：元素无放入顺序，元素不可重复（注意：元素虽然无放入顺序，但是元素在set中的位置是有该元素的HashCode决定的，其位置其实是固定的） 

java中集合类有哪些？
	集合类型主要有3种:set(集)、list(列表)和map(映射)。
	Java集合类包括Map集合、Collection接口以及继承了Collection接口的Set集合和List集合。
		Map集合包括Map接口和实现Map接口的常用类HashMap与TreeMap，Set集合包括Set接口和实现Set接口的常用类HashSet与TreeSet，
		List集合包括List接口和实现List接口的常用类ArrayList与LinkList。

迭代器的使用方法：以list为例
	（1）for(int i=0;i<list.size();i++){
		
		}
	(2)for(IString s : words)

	Iterator it = Type.iterator();
	(3)while(it.hashNext()){ }

栈和堆的底层区别？
	栈：由系统自动分配
	堆：需要程序员自己申请，（调用malloc 、realloc、calloc），并指明大小，并由程序员进行释放。

对称加密和非对称加密的区别：
      （1）对称加密采用了对称密码编码技术，它的特点是文件加密和解密使用相同的密钥加密；
		也就是密钥也可以用作解密密钥，这种方法在密码学中叫做对称加密算法，对称加密算法使用起来简单快捷，密钥较短，且破译困难，除了数据加密标准（DES），
		另一个对称密钥加密系统是国际数据加密算法（IDEA），它比DES的加密性好，而且对计算机功能要求也没有那么高
      （2）与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。
		公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；
			如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。
		非对称加密算法实现机密信息交换的基本过程是：甲方生成一对密钥并将其中的一把作为公用密钥向其它方公开；
			得到该公用密钥的乙方使用该密钥对机密信息进行加密后再发送给甲方；甲方再用自己保存的另一把专用密钥对加密后的信息进行解密。
			甲方只能用其专用密钥解密由其公用密钥加密后的任何信息。

哈希碰撞（hash扩容）
	有可能两个不同的原始值在经过哈希运算后得到同样的结果。
	 当hashmap中的元素越来越多的时候，碰撞的几率也就越来越高（因为数组的长度是固定的），所以为了提高查询的效率，就要对hashmap的数组进行扩容；
	当hashmap中的元素个数超过数组大小*loadFactor时，就会进行数组扩容，loadFactor的默认值为0.75，也就是说，默认情况下，数组大小为16，那么当hashmap中元素个数超过16*0.75=12的时候，就把数组的大小扩展为2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，

redis数据持久化？优缺点？
	（1）RDB 持久化可以在指定的时间间隔内生成数据集的时间点快照
	（2）AOF 持久化记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。
	（3）RDB 优点：RDB是Redis数据集的基于时间点的紧凑的副本，非常适合于备份场景。
		       与AOF相比RDB在数据集较大时能够以更快的速度恢复。
		 缺点：若需在Redis停止工作时（例如意外断电）尽可能保证数据不丢失，那么RDB不是最好的方案。例如，通常会每隔5分钟或者更长的时间来创建一次快照，如若Redis没有被正确的关闭就可能丢失最近几分钟的数据。
	     AOF 优点：使用AOF方式时Redis持久化更可靠：有三种不同的fsync策略供选择：no fsync at all、fsync every second、 fsync at every query。
			默认为fsync every second此时的写性能仍然很好，且最坏的情况下可能丢失一秒钟的写操作。
		 缺点：同样的数据集AOF文件要比RDB文件大很多。

讲讲spring AOP、MVC、IOC
	IOC:IoC叫控制反转，是Inversion of Control的缩写，DI（Dependency Injection）叫依赖注入，是对IoC更简单的诠释。控制反转是把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理
	AOP：AOP（Aspect Orient Programming），指面向方面（切面）编程，作为面向对象的一种补充，用于处理系统中分布于各个模块的横切关注点，比如事务管理、日志、缓存等等。
		AOP实现的关键在于AOP框架自动创建的AOP代理，AOP代理主要分为静态代理和动态代理，静态代理的代表为AspectJ；而动态代理则以Spring AOP为代表。	
	MVC：主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。他的两个核心是两个核心：
		处理器映射：选择使用哪个控制器来处理请求 
		视图解析器：选择结果应该如何渲染

spring建议使用的注入方式？构造器注入还是Setter注入？
	依赖注入可以通过setter方法注入（设值注入）、构造器注入和接口注入三种方式来实现，Spring支持setter注入和构造器注入，通常使用构造器注入来注入必须的依赖关系，对于可选的依赖关系，
		则setter注入是更好的选择，setter注入需要类提供无参构造器或者无参的静态工厂方法来创建对象。
spring用到哪些设计模式？
	工厂模式，这个很明显，在各种BeanFactory以及ApplicationContext创建中都用到了；
	模版模式，这个也很明显，在各种BeanFactory以及ApplicationContext实现中也都用到了；
	代理模式，在Aop实现中用到了JDK的动态代理；
	单例模式，这个比如在创建bean的时候。
	观察者模式，定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象得到通知并自动更新。
		常用的地方是listener的实现。如ApplicationListener。 
	策略模式，
	模板方法，

事务以及事务的隔离级别？
	事务是访问数据库的一个操作序列，数据库应用系统通过事务集来完成对数据库的存取。
	事务必须服从ISO/IEC所制定的ACID原则。ACID是原子性（atomicity）、一致性（consistency）、隔离性（isolation）、持久性（durability）的缩写，这四种状态的意思是：
	事务的隔离级别：DEFAULT（默认）、READ_UNCOMMITTED（读未提交）、READ_COMMITED（读已提交）、 REPEATABLE_READ（可重复读）、SERLALIZABLE（串行化）
	

mybatis如何进行批量插入？
	<insert id="insertBatch" parameterType="List">
		INSERT INTO TStudent(name,age) values
		<foreach collection="list" item="item" index="index"  separator="，">
			（ #{item.name}, #{item.age}）
		</foreach>
	</insert>
	foreach元素的属性主要有 item，index，collection，open，separator，close。item表示集合中每一个元素进行迭代时的别名，index指 定一个名字，用于表示在迭代过程中，每次迭代到的位置，
	open表示该语句以什么开始，separator表示在每次进行迭代之间以什么符号作为分隔 符，close表示以什么结束，在使用foreach的时候最关键的也是最容易出错的就是collection属性，
	该属性是必须指定的，但是在不同情况 下，该属性的值是不一样的，主要有以下3种情况：
		如果传入的是单参数且参数类型是一个List的时候，collection属性值为list
		如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array
		如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了

mybatis的#{} 和${} 的区别：
	#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：order by #user_id#，如果传入的值是111,那么解析成sql时的值为order by "111", 如果传入的值是id，则解析成的sql为order by "id". 　
	$将传入的数据直接显示生成在sql中。如：order by $user_id$，如果传入的值是111,那么解析成sql时的值为order by user_id, 如果传入的值是id，则解析成的sql为order by id. 　　 	
	#方式能够很大程度防止sql注入； $方式无法防止Sql注入。 

查找余额最高的前三位的用户按余额升序排序：
	select * from account ORDER BY money desc limit 3;

内连接、左外连接、右外连接的含义：
	左外连接：包含左边表的全部行（不管右边的表中是否存在与它们匹配的行），以及右边表中全部匹配的行
	右外连接：包含右边表的全部行（不管左边的表中是否存在与它们匹配的行），以及左边表中全部匹配的行
	内  连接：inner join（内连接）返回左右表中的共同的数据记录；
	全外连接: full join包含左、右两个表的全部行，不管另外一边的表中是否存在与它们匹配的行。
	交叉连接: cross join生成笛卡尔积－它不使用任何匹配或者选取条件，而是直接将一个数据源中的每个行与另一个数据源的每个行都一一匹配
	
数据库查找重复的数据：
	 方法一：  
	 select * from account where name in(
	 	select name  from account GROUP BY name having count(1)>1
	 )ORDER BY money desc ;
	 方法二：（推荐使用这个，有利于性能高
	select * from account INNER JOIN (
		select name from account group by name having count(*)>1
	)as acc using(name);

找出课程成绩前三名的信息：
	select * from account where id in (select s.id from (select id from account ORDER BY money desc limit 0,3)as s);

删除重复的邮箱：delete p1 from Person p1,Person p2 where p1.Email=p2.Email and p1.Id > p2.Id;

查找第二高的薪水：（SQL查询应该返回 200 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 null。）
	SELECT IFNULL( (SELECT DISTINCT Salary FROM Employee  ORDER BY Salary desc  LIMIT 1 , 1), NULL) AS SecondHighestSalary

查找重复的电子邮箱：
	select Email from Person group by Email having count(Email)>1;

分数的排名：（编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。）
	select a.Score as Score , (select count(distinct b.Score) from Scores b where b.Score >=a.Score) as Rank from Scores a order by Score DESC;


oracle的分页查询：
	SELECT * FROM (SELECT ROWNUM AS rowno, t.* FROM emp t 
         	WHERE hire_date BETWEEN TO_DATE ('20060501', 'yyyymmdd') AND TO_DATE ('20060731', 'yyyymmdd') AND ROWNUM <= 20) table_alias
 	WHERE table_alias.rowno >= 10;

mysql的分页查询：
SELECT * FROM articles WHERE id >=
(SELECT id FROM articles  WHERE category_id = 123 ORDER BY id LIMIT 10000, 1) 
AND category_id = 123 ORDER BY id LIMIT 10;




动态代理的两种方式及区别：
	JDK动态代理：利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。
	CGlib动态代理：利用ASM（开源的Java字节码编辑库，操作字节码）开源包，将代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。
	区别：JDK代理只能对实现接口的类生成代理；CGlib是针对类实现代理，对指定的类生成一个子类，并覆盖其中的方法，这种通过继承类的实现方式，不能代理final修饰的类。

	
对象的引用：
	在java里，永远无法直接操作对象，对对象的所有操作都是通过对象的引用来间接完成的。
	 Vehicle veh1 = new Vehicle();
	通常把这条语句的动作称之为创建一个对象，其实，它包含了四个动作。
	1）右边的“new Vehicle”，是以Vehicle类为模板，在堆空间里创建一个Vehicle类对象（也简称为Vehicle对象）。
	2）末尾的()意味着，在对象创建后，立即调用Vehicle类的构造函数，对刚生成的对象进行初始化。构造函数是肯定有的。如果你没写，Java会给你补上一个默认的构造函数。
	3）左边的“Vehicle veh 1”创建了一个Vehicle类引用变量。所谓Vehicle类引用，就是以后可以用来指向Vehicle对象的对象引用。
	4）“=”操作符使对象引用指向刚创建的那个Vehicle对象。